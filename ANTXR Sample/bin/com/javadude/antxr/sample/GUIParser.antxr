/* ******************************************************************************
 * Copyright (c) 2005 Scott Stanchfield, http://javadude.com
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *   Based on the ANTLR parser generator by Terence Parr, http://antlr.org
 *******************************************************************************/
header {
package com.javadude.antxr.sample;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
}

/**
 * A sample parser that generates a Java GUI based on an XML specification
 */
class GUIParser extends Parser;

document returns [JFrame f=null] 
	:	f=<frame> EOF
	;
	
/**
 * Create a JFrame based on a frame tag
 * @return the generated JPanel
 */
<frame> returns [JFrame f=null] 
	{ f = new JFrame(@title); }
	:	layout[f.getContentPane()]
		{
			f.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
			f.pack();
		}
	;

/**
 * Create a JPanel based on a panel tag
 * @return the generated JPanel
 */
<panel> returns [JPanel p=new JPanel()] 
	:	layout[p]
	;

/**
 * Recognizes layout managers
 * @param container the container to which we add the layout manager
 */
layout [Container container]
	:	<borderLayout>[container]
	|	<flowLayout>[container]
	|	<gridLayout>[container]
	;
	
/**
 * Create BorderLayout for the borderLayout tag
 * @param container the container to which we add the layout manager
 */
<borderLayout> [Container container]
	{ container.setLayout(new BorderLayout()); }
	:	(	<north>[container]
		|	<south>[container]
		|	<east>[container]
		|	<west>[container]
		|	<center>[container]
		)*
	;

/**
 * Add the nested component to the container at the "north" position
 * @param container the container to which we add the nested component
 */
<north> [Container container]
	{ Component c; }
	:	c=component {container.add(c, BorderLayout.NORTH); }
	;
	
/**
 * Add the nested component to the container at the "south" position
 * @param container the container to which we add the nested component
 */
<south> [Container container]
	{ Component c; }
	:	c=component {container.add(c, BorderLayout.SOUTH); }
	;
	
/**
 * Add the nested component to the container at the "east" position
 * @param container the container to which we add the nested component
 */
<east> [Container container]
	{ Component c; }
	:	c=component {container.add(c, BorderLayout.EAST); }
	;
	
/**
 * Add the nested component to the container at the "west" position
 * @param container the container to which we add the nested component
 */
<west> [Container container]
	{ Component c; }
	:	c=component {container.add(c, BorderLayout.WEST); }
	;
	
/**
 * Add the nested component to the container at the "center" position
 * @param container the container to which we add the nested component
 */
<center> [Container container]
	{ Component c; }
	:	c=component {container.add(c, BorderLayout.CENTER); }
	;
	
/**
 * Create FlowLayout for the flowLayout tag
 * @param container the container to which we add the layout manager
 */
<flowLayout> [Container container]
	{
		int alignment = FlowLayout.CENTER;
		String align = @align;
		if (align != null)
			if ("RIGHT".equals(align))
				alignment = FlowLayout.RIGHT;
			else if ("LEFT".equals(align))
				alignment = FlowLayout.LEFT;
			else if ("CENTER".equals(align))
				alignment = FlowLayout.CENTER;
		
		container.setLayout(new FlowLayout(alignment));
			
		Component c;
	}
	:	( c=component {container.add(c);} )*
	;

/**
 * Create GridLayout for the gridLayout tag
 * @param container the container to which we add the layout manager
 */
<gridLayout> [Container container]
	{
		int rows = Integer.parseInt(@rows);
		int cols = Integer.parseInt(@cols);
		container.setLayout(new GridLayout(rows,cols));
		Component c;
	}
	:	( c=component {container.add(c);} )*
	;

/**
 * Recognize a component
 * @return the component created based on an xml spec
 */
component returns [Component component=null]
	:	component=<button>
	|	component=<label>
	|	component=<textField>
	|	component=<panel>
	;

/**
 * Create a JButton based on a "button" xml tag
 * @return the created JButton
 */
<button> returns [JButton b=new JButton()]
	{ b.setText(@text); }
	:	(<printAction>[b])?
	;

/**
 * Create a JLabel based on a "label" xml tag
 * @return the created JLabel
 */
<label> returns [JLabel l=new JLabel()]
	{ l.setText(@text); }
	:	
	;

/**
 * Create a JTextField based on a "textField" xml tag
 * @return the created JTextField
 */
<textField> returns [JTextField t=new JTextField()]
	{ t.setText(@text); }
	:	
	;

/**
 * Create an ActionListener that prints the data in a "printAction" xml tag
 * @param b the button to which we add the listener
 */
<printAction>[JButton b]
	:	pcData:PCDATA 
		{
			final String value = pcData.getText();
			b.addActionListener(
				new ActionListener() {
					public void actionPerformed(ActionEvent e) {
					System.out.println(value);
			}});
		}
	;	
